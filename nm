# ----------------------------
# Imports
# ----------------------------
import tkinter as tk
from tkinter import ttk, messagebox, simpledialog
import pickle
import os

# ----------------------------
# Pickle File Handling
# ----------------------------

# Save data to a binary file
def save_data(data, filename):
    try:
        with open(filename, 'wb') as file:
            pickle.dump(data, file)
    except pickle.PicklingError as e:
        messagebox.showerror("Pickle Error", f"Could not save to {filename}:\n{e}")
    except IOError as e:
        messagebox.showerror("IO Error", f"File write error:\n{e}")

# Load data from a binary file or return default
def load_data(filename, default):
    if not os.path.exists(filename):
        return default
    try:
        with open(filename, 'rb') as file:
            return pickle.load(file)
    except (pickle.UnpicklingError, EOFError) as e:
        messagebox.showerror("Load Error", f"Error reading {filename}:\n{e}")
        return default

# ----------------------------
# Basic User Class
# ----------------------------

# Represents a user/customer in the system
class User:
    def __init__(self, user_id, name, email, payment_info, contact_number):
        self.user_id = user_id
        self.name = name
        self.email = email
        self.payment_info = payment_info
        self.contact_number = contact_number
        self.purchase_history = []

    # Getters and setters for user attributes
    def get_user_id(self): return self.user_id
    def set_user_id(self, user_id): self.user_id = user_id

    def get_name(self): return self.name
    def set_name(self, name): self.name = name

    def get_email(self): return self.email
    def set_email(self, email): self.email = email

    def get_payment_info(self): return self.payment_info
    def set_payment_info(self, payment_info): self.payment_info = payment_info

    def get_contact_number(self): return self.contact_number
    def set_contact_number(self, contact_number): self.contact_number = contact_number

    def get_purchase_history(self): return self.purchase_history
    def set_purchase_history(self, purchase_history): self.purchase_history = purchase_history

# ----------------------------
# Ticket Class
# ----------------------------

# Represents a ticket for the event
class Ticket:
    def __init__(self, ticket_id, ticket_type, price):
        self.ticket_id = ticket_id
        self.ticket_type = ticket_type
        self.price = price

    # Getters and setters for ticket attributes
    def get_ticket_id(self): return self.ticket_id
    def set_ticket_id(self, ticket_id): self.ticket_id = ticket_id

    def get_ticket_type(self): return self.ticket_type
    def set_ticket_type(self, ticket_type): self.ticket_type = ticket_type

    def get_price(self): return self.price
    def set_price(self, price): self.price = price

# ----------------------------
# Booking and Payment Classes
# ----------------------------

# Represents a payment made for a booking
class Payment:
    def __init__(self, payment_id, booking, amount, payment_method, transaction_status):
        self.payment_id = payment_id
        self.booking = booking
        self.amount = amount
        self.payment_method = payment_method
        self.transaction_status = transaction_status

    # Getters and setters for payment
    def get_payment_id(self): return self.payment_id
    def set_payment_id(self, payment_id): self.payment_id = payment_id

    def get_booking(self): return self.booking
    def set_booking(self, booking): self.booking = booking

    def get_amount(self): return self.amount
    def set_amount(self, amount): self.amount = amount

    def get_payment_method(self): return self.payment_method
    def set_payment_method(self, payment_method): self.payment_method = payment_method

    def get_transaction_status(self): return self.transaction_status
    def set_transaction_status(self, transaction_status): self.transaction_status = transaction_status

# Represents a booking made by a user
class Booking:
    def __init__(self, booking_id, user, ticket, date, payment):
        self.booking_id = booking_id
        self.user = user
        self.ticket = ticket
        self.date = date
        self.payment = payment

    # Getters and setters for booking
    def get_booking_id(self): return self.booking_id
    def set_booking_id(self, booking_id): self.booking_id = booking_id

    def get_user(self): return self.user
    def set_user(self, user): self.user = user

    def get_ticket(self): return self.ticket
    def set_ticket(self, ticket): self.ticket = ticket

    def get_date(self): return self.date
    def set_date(self, date): self.date = date

    def get_payment(self): return self.payment
    def set_payment(self, payment): self.payment = payment

# ----------------------------
# GUI Class
# ----------------------------

# Main Ticketing System GUI
class TicketingSystemGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("F1 Ticketing System")
        self.root.geometry("800x600")

        # Load data from files
        self.customers = load_data('customers.pkl', {})
        self.bookings = load_data('bookings.pkl', [])
        self.ticket_sales = {}

        # Create tabs for different sections
        self.tab_control = ttk.Notebook(root)
        self.account_tab = ttk.Frame(self.tab_control)
        self.ticket_tab = ttk.Frame(self.tab_control)
        self.admin_tab = ttk.Frame(self.tab_control)

        self.tab_control.add(self.account_tab, text="Account Management")
        self.tab_control.add(self.ticket_tab, text="Ticket Purchasing")
        self.tab_control.add(self.admin_tab, text="Admin Dashboard")
        self.tab_control.pack(expand=1, fill="both")

        # Setup each tab
        self.setup_account_management()
        self.setup_ticket_purchasing()
        self.setup_admin_dashboard()

    # ----------------------------
    # Account Tab
    # ----------------------------
    def setup_account_management(self):
        ttk.Label(self.account_tab, text="User ID:").grid(row=0, column=0, padx=10, pady=10)
        self.user_id_entry = ttk.Entry(self.account_tab)
        self.user_id_entry.grid(row=0, column=1, padx=10, pady=10)

        ttk.Label(self.account_tab, text="Name:").grid(row=1, column=0, padx=10, pady=10)
        self.name_entry = ttk.Entry(self.account_tab)
        self.name_entry.grid(row=1, column=1, padx=10, pady=10)

        ttk.Label(self.account_tab, text="Email:").grid(row=2, column=0, padx=10, pady=10)
        self.email_entry = ttk.Entry(self.account_tab)
        self.email_entry.grid(row=2, column=1, padx=10, pady=10)

        ttk.Label(self.account_tab, text="Contact Number:").grid(row=3, column=0, padx=10, pady=10)
        self.contact_entry = ttk.Entry(self.account_tab)
        self.contact_entry.grid(row=3, column=1, padx=10, pady=10)

        ttk.Button(self.account_tab, text="Add Customer", command=self.add_customer).grid(row=4, column=0, padx=10, pady=10)

    # Save a new customer entry
    def add_customer(self):
        user_id = self.user_id_entry.get()
        name = self.name_entry.get()
        email = self.email_entry.get()
        contact = self.contact_entry.get()

        # Prevent duplicate user IDs
        if user_id in self.customers:
            messagebox.showerror("Error", "User ID already exists!")
            return

        self.customers[user_id] = User(user_id, name, email, None, contact)
        save_data(self.customers, 'customers.pkl')
        messagebox.showinfo("Success", "Customer added successfully!")

    # ----------------------------
    # Ticket Tab
    # ----------------------------
    def setup_ticket_purchasing(self):
        ttk.Label(self.ticket_tab, text="Select Ticket Type:").grid(row=0, column=0, padx=10, pady=10)
        self.ticket_type_var = tk.StringVar()
        self.ticket_dropdown = ttk.Combobox(self.ticket_tab, textvariable=self.ticket_type_var, state="readonly")
        self.ticket_dropdown['values'] = ["VIP", "Regular", "Student"]
        self.ticket_dropdown.grid(row=0, column=1, padx=10, pady=10)

        ttk.Button(self.ticket_tab, text="Purchase Ticket", command=self.purchase_ticket).grid(row=1, column=0, columnspan=2, pady=20)

    # Handle ticket purchase
    def purchase_ticket(self):
        ticket_type = self.ticket_type_var.get()
        if not ticket_type:
            messagebox.showerror("Input Error", "Please select a ticket type.")
            return

        # Record ticket sale
        self.ticket_sales[ticket_type] = self.ticket_sales.get(ticket_type, 0) + 1
        messagebox.showinfo("Ticket Purchase", f"Purchased {ticket_type} ticket!")

    # ----------------------------
    # Admin Tab
    # ----------------------------
    def setup_admin_dashboard(self):
        ttk.Label(self.admin_tab, text="Admin Dashboard", font=('Arial', 14)).pack(pady=20)
        ttk.Button(self.admin_tab, text="View Ticket Sales", command=self.view_ticket_sales).pack(pady=10)

    # Show ticket sales summary
    def view_ticket_sales(self):
        if not self.ticket_sales:
            messagebox.showinfo("Ticket Sales", "No ticket sales recorded.")
        else:
            report = "\n".join([f"{k}: {v}" for k, v in self.ticket_sales.items()])
            messagebox.showinfo("Ticket Sales", report)
